#!/usr/bin/env python

pipeline {
  agent any 
  parameters {
    string (defaultValue: '/Users/b0097042/Downloads/AirtelXstream-release-1.30.3-12657-playStore.apk', description: '', name: 'INPUT_LOCATION', trim: true)
    string (defaultValue: '76c7a771e3f8ffdd99e829b71f1a3ed6319ce08db1831a641cf1978c659bac24', description: '', name: 'AUTH_KEY', trim: true)
  }
  
    stages {
    stage('Analysis') {
    steps {
      script {
          
            //cleanWs(patterns: [[pattern: '*.zip', type: 'EXCLUDE']])
            upload_cmd = "curl -s -S -F 'file=@${env.INPUT_LOCATION}' http://localhost:8000/api/v1/upload -H 'Authorization:${env.AUTH_KEY}'"
            upload_result = sh label: 'Upload Binary', returnStdout: true, script: upload_cmd
                      
            def response_map = readJSON text: upload_result
            def app_type = response_map["scan_type"]
            def app_hash = response_map["hash"]
            def app_name = response_map["file_name"]
                      
            scan_start_cmd = "curl -s -S -X POST --url http://localhost:8000/api/v1/scan --data 'scan_type=${app_type}&file_name=${app_name}&hash=${app_hash}' -H 'Authorization:${env.AUTH_KEY}'"
            sh label: 'Start Scan of Binary', returnStdout: true, script: scan_start_cmd
            
            //sh "qark --apk ${env.INPUT_LOCATION}"

            def now = new Date()
            current_time = now.format("yyyy-MM-dd_HH:mm:ss", TimeZone.getTimeZone('UTC'))
            def fileData="Report_$current_time"
            //def json_File="Report_$current_time+.json"
            
            pdfReport = "curl POST --url http://localhost:8000/api/v1/download_pdf --data 'hash=${app_hash}&scan_type=${app_type}' -H 'Authorization:${env.AUTH_KEY}' > '$fileData'.pdf"
            sh label: 'Generate PDF', returnStdout: true, script: pdfReport
            
            jsonReport = "curl POST --url http://localhost:8000/api/v1/report_json --data 'hash=${app_hash}&scan_type=${app_type}' -H 'Authorization:${env.AUTH_KEY}' > '$fileData'.json"
            sh label: 'Generate JSON', returnStdout: true, script: jsonReport
            
            report = "curl POST --url http://localhost:8000/api/v1/download_pdf --data 'hash=${app_hash}&scan_type=${app_type}' -H 'Authorization:${env.AUTH_KEY}' > MobSF_Scan_Report.pdf"
            sh label: 'Generate PDF Report', returnStdout: true, script: report
            
            archive (includes: 'MobSF_Scan_Report.pdf')
            //archive (includes: '*.json')
            //archiveArtifacts '*.pdf, *.json'
            //zip archive: true, dir: '', glob: '', zipFile: '$fileData.zip'
            //archiveArtifacts artifacts: '*.*', onlyIfSuccessful: true
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: false, reportDir: '', reportFiles: '*.pdf', reportName: 'MobSFReport', reportTitles: ''])
            }
        }
      }
    }
  } 
